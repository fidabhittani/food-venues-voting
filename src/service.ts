/**
 * Application commmon request service, which will
 * handle the errors and response in success case.
 * This has been configured with dispatching error
 * messages and responsible for starting and stopping
 * the loader when making a request.
 */
import axios from "axios";
import { setLoading, setMessage } from "./actions/app";
import store from "./store";
/**
 * request service wrapped with axios
 * @param params
 */
const request = async (params: any) => {
  let { client, options, loadingText = "Loading..." } = params;
  if (!client) {
    client = axios;
  }
  /**
   * Start loading when a request is made to the server
   */
  store.dispatch(setLoading({ status: true, text: loadingText }));

  try {
    const response = await client(options);
    return response;
  } catch (error) {
    /**
     * Here we can handle all sorts of errors being sent
     * from server and dispatch them to the reducer to
     * manage it in state for use on the UI. below is just
     * a sample error when the requests breaks or there occur
     * some sort of API error.
     */

    const { message } = error;

    // We can device handlers for other errors here

    const messageObj = {
      message: message,
      type: "error",
      errorDetails: error
    };
    /**
     * Dispatch the message being generated by receiving erros
     * from server api.
     */
    //debugger;
    store.dispatch(setMessage(messageObj));
    setTimeout(() => {
      store.dispatch(setMessage({}));
    }, 10000);

    return error;
  } finally {
    /**
     * When request is completed we will stop
     * the loader anyway by issuing a stop loader action.
     */
    store.dispatch(setLoading({ status: false, text: "" }));
  }
};

export default request;
