{"version":3,"sources":["layout/main/index.tsx","layout/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SubMenu","es_menu","Header","Footer","Sider","Content","CreateMenus","_ref","_ref$menus","menus","react_default","a","createElement","mode","theme","Array","isArray","map","menu","index","title","items","key","icon","type","_ref2","Item","concat","MainLayout","_ref3","children","_ref3$title","_ref3$menus","_useState","useState","_useState2","Object","slicedToArray","menuCollapsed","setMenuCollapsed","layout","id","className","affix","offsetTop","popover","placement","content","trigger","style","color","fontSize","marginRight","avatar","background","padding","collapsed","main_CreateMenus","position","onClick","textAlign","dataSource","name","age","address","columns","dataIndex","App","src_layout","page_header","subTitle","card","comment","author","src","alt","datetime","tooltip","divider","row","gutter","col","span","statistic","value","es_alert","message","description","showIcon","precision","es_button","marginTop","table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eab2bf4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Layout, Avatar, Menu, Icon, Popover, Affix } from \"antd\";\nimport \"./main.less\";\nconst SubMenu = Menu.SubMenu;\n\nconst { Header, Footer, Sider, Content } = Layout;\n\ninterface IMainLayout {\n  children: any;\n  menus?: any;\n  title?: string;\n}\n\ninterface IMenu {\n  key?: string | number;\n  title?: string;\n  items?: IMenu[];\n}\n\ninterface IMenus {\n  menus?: IMenu[];\n}\n\nconst CreateMenus = ({ menus = [] }: IMenus) => {\n  return (\n    <Menu mode=\"inline\" theme=\"dark\">\n      {menus &&\n        Array.isArray(menus) &&\n        menus.map((menu: IMenu, index: number) => {\n          const { title, items, key } = menu;\n          if (items && Array.isArray(items)) {\n            return (\n              <SubMenu\n                key={key}\n                title={\n                  <span>\n                    <Icon type=\"mail\" />\n                    <span>{title}</span>\n                  </span>\n                }\n              >\n                {items &&\n                  Array.isArray(items) &&\n                  items.map(({ title }: IMenu, index: number) => (\n                    <Menu.Item key={`sub-menu-item-${index}`}>\n                      <Icon type=\"desktop\" />\n                      <span>{title}</span>\n                    </Menu.Item>\n                  ))}\n              </SubMenu>\n            );\n          }\n\n          return (\n            <Menu.Item key={`sub-menu-item-${index}`}>\n              <Icon type=\"desktop\" />\n              <span>{title}</span>\n            </Menu.Item>\n          );\n        })}\n    </Menu>\n  );\n};\n\nconst MainLayout = ({\n  children,\n  title = \"Finleap Case Study\",\n  menus = [{ key: \"Home\", title: \"Home\" }]\n}: IMainLayout) => {\n  const [menuCollapsed, setMenuCollapsed] = useState(false);\n\n  return (\n    <Layout id=\"main-app-container\" className=\"layout\">\n      <Affix offsetTop={0}>\n        <Header className=\"header\">\n          <div className=\"left\">\n            <h2>{title}</h2>\n          </div>\n          <div className=\"right\">\n            <Popover\n              placement=\"bottom\"\n              title={\"Settings\"}\n              content={() => null}\n              trigger=\"click\"\n            >\n              <Icon\n                style={{\n                  color: \"#87d068\",\n                  fontSize: \"18px\",\n                  marginRight: \"10px\"\n                }}\n                type=\"setting\"\n              />\n            </Popover>\n\n            <Avatar\n              style={{ color: \"#87d068\", background: \"transparent\" }}\n              icon=\"user\"\n            />\n          </div>\n        </Header>\n      </Affix>\n\n      <Content style={{ padding: \"0 0\" }}>\n        <Layout>\n          <Sider collapsed={menuCollapsed}>\n            <Affix offsetTop={60}>\n              <CreateMenus menus={menus} />\n            </Affix>\n          </Sider>\n          <Content style={{ position: \"relative\" }}>\n            <Icon\n              className=\"trigger\"\n              type={menuCollapsed ? \"menu-unfold\" : \"menu-fold\"}\n              onClick={() => setMenuCollapsed(!menuCollapsed)}\n            />\n\n            {children}\n            <Footer style={{ textAlign: \"center\" }}>\n              Ant Design Â©2019 Created by Ant UED\n            </Footer>\n          </Content>\n        </Layout>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default MainLayout;\n","import MainLayout from \"./main\";\n\nexport default MainLayout;\n","import React from \"react\";\n\nimport {\n  Comment,\n  Alert,\n  Avatar,\n  Tooltip,\n  Card,\n  Statistic,\n  Row,\n  Col,\n  Button,\n  Divider,\n  PageHeader,\n  Table\n} from \"antd\";\n\nimport MainLayout from \"./layout\";\nconst dataSource = [\n  {\n    key: \"1\",\n    name: \"Mike\",\n    age: 32,\n    address: \"10 Downing Street\"\n  },\n  {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  },\n  {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  },\n  {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  },\n  {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  },\n  {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  }\n];\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  },\n  {\n    title: \"Age\",\n    dataIndex: \"age\",\n    key: \"age\"\n  },\n  {\n    title: \"Address\",\n    dataIndex: \"address\",\n    key: \"address\"\n  }\n];\nconst App = () => {\n  return (\n    <MainLayout>\n      <PageHeader\n        title=\"Food Venue Recomendations\"\n        subTitle=\"List of best 3 places to have a lunch\"\n      />\n\n      <Card title=\"Comments\">\n        <Comment\n          author={`Han Solo`}\n          avatar={\n            <Avatar\n              src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n              alt=\"Han Solo\"\n            />\n          }\n          content={\n            <p>\n              We supply a series of design principles, practical patterns and\n              high quality design resources (Sketch and Axure), to help people\n              create their product prototypes beautifully and efficiently.\n            </p>\n          }\n          datetime={\n            <Tooltip title={222}>\n              <span>222</span>\n            </Tooltip>\n          }\n        />\n        <Divider />\n        <Row gutter={16}>\n          <Col span={12}>\n            <Statistic title=\"Active Users\" value={112893} />\n            <Alert\n              message=\"Success Tips\"\n              description=\"Detailed description and advice about successful copywriting.\"\n              type=\"success\"\n              showIcon\n            />\n          </Col>\n          <Col span={12}>\n            <Statistic\n              title=\"Account Balance (CNY)\"\n              value={112893}\n              precision={2}\n            />\n            <Button style={{ marginTop: 16 }} type=\"primary\">\n              Recharge\n            </Button>\n          </Col>\n        </Row>\n      </Card>\n      <Divider />\n      <Card title=\"Users\">\n        <Table dataSource={dataSource} columns={columns} />;\n      </Card>\n    </MainLayout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}